#!/usr/bin/env python
from __future__ import print_function

import sys
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
import message_filters

import math

class The_Ring:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        self.image_sub = message_filters.Subscriber("/camera/rgb/image_raw", Image)
        self.depth_sub = message_filters.Subscriber("/camera/depth_registered/image_raw", Image)
        self.ts = message_filters.ApproximateTimeSynchronizer([self.image_sub, self.depth_sub], 100, 2)
        self.ts.registerCallback(self.image_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('markers', MarkerArray, queue_size=10000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

        # Pose tracker
        self.circle_poses = dict()
        self.publish_circle_poses = []

        self.point_pub = rospy.Publisher('points', Pose)


    def get_pose(self,e,dist):
        # Calculate the position of the detected ellipse

        k_f = 525 # kinect focal length in pixels

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]

        angle_to_target = np.arctan2(elipse_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x,y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_frame"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

	# Define a stamped message for transformation - in the "camera rgb frame"
	point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = rospy.Time(0)

        # Get the point in the "map" coordinate system
        point_world = self.tf_buf.transform(point_s, "map")

        # Create a Pose object with the same position
        pose = Pose()
        pose.position.x = point_world.point.x
        pose.position.y = point_world.point.y
        pose.position.z = point_world.point.z

        publish_point = None
        is_added = False
        for old_pose in self.circle_poses.keys():
            if self.in_bounds(old_pose, pose):
                is_added = True
                required_circles = 7
                self.circle_poses[old_pose].append(pose)
                if len(self.circle_poses[old_pose]) >= required_circles:
                    avg = self.avg_pose(self.circle_poses[old_pose])
                    if not self.is_in_publish_points(avg):
                        publish_point = avg
                        self.publish_circle_poses.append(avg)
                break

        if publish_point is None:
            if not is_added:
                self.circle_poses[pose] = []
            return

        self.publish_circle_poses.append(publish_point)
        print("Publishing point ({}, {})".format(pose.position.x, pose.position.y))
        self.point_pub.publish(publish_point)

        # Create a marker used for visualization
        self.marker_num += 1
        marker = Marker()
        marker.header.stamp = point_world.header.stamp
        marker.header.frame_id = point_world.header.frame_id
        marker.pose = publish_point
        marker.type = Marker.CUBE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.id = self.marker_num
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = ColorRGBA(0, 1, 0, 1)
        self.marker_array.markers.append(marker)

        self.markers_pub.publish(self.marker_array)

    def in_bounds(self, old_pose, new_pose):
        tolerance = 0.05
        return abs(old_pose.position.x - new_pose.position.x) <= tolerance and \
                abs(old_pose.position.y - new_pose.position.y) <= tolerance

    def avg_pose(self, poses):
        x = 0
        y = 0
        z = 0
        for pose in poses:
            x = x + pose.position.x
            y = y + pose.position.y
            z = z + pose.position.z

        pose = Pose()
        pose.position.x = x / len(poses)
        pose.position.y = y / len(poses)
        pose.position.z = z / len(poses)

        return pose

    def is_in_publish_points(self, old_pose):
        bounds = 0.5
        for new_pose in self.publish_circle_poses:
            if abs(old_pose.position.x - new_pose.position.x) <= bounds and \
                abs(old_pose.position.y - new_pose.position.y) <= bounds:
                return True

        return False




def main():

    ring_finder = The_Ring()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
