#!/usr/bin/env python
import roslib
roslib.load_manifest('robot')
import rospy
import sensor_msgs.msg
import message_filters
import tf2_ros
from geometry_msgs.msg import Point, Twist


import actionlib
from actionlib_msgs.msg import GoalStatus
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from geometry_msgs.msg import Twist
PI = 3.1415926535897

from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

from geometry_msgs.msg import Pose

import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point, Vector3, Quaternion

import math

debug = False

def init_explore_points():
	explore_points = []
	
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.717
	goal.target_pose.pose.position.y = -1.82
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.889
	goal.target_pose.pose.position.y = -1.67
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.174
	goal.target_pose.pose.position.y = 0.0791
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.961
	goal.target_pose.pose.position.y = 1.69
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)
	

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.644
	goal.target_pose.pose.position.y = 1.67
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.768
	goal.target_pose.pose.position.y = -0.47
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)	

	return explore_points

def init_explore_points_debug():
	explore_points = []
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.39
	goal.target_pose.pose.position.y = 1.51
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.37
	goal.target_pose.pose.position.y = 3.83
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.61
	goal.target_pose.pose.position.y = 2.67
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 4.79
	goal.target_pose.pose.position.y = 1.98
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.65
	goal.target_pose.pose.position.y = 1.42
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	return explore_points


class Main():
	def __init__(self):
		global debug

		self.ac = actionlib.SimpleActionClient("move_base", MoveBaseAction)

		self.vel_pub = rospy.Publisher('/cmd_vel_mux/input/navi', Twist, queue_size=10)

		if debug:
			self.explore_points = init_explore_points_debug()
		else:
			self.explore_points = init_explore_points()
		self.curr_explore_point = 0
		self.ring_poses = []
		self.ring_counter = 0

		self.tf2_buffer = tf2_ros.Buffer()
		self.tf2_listener = tf2_ros.TransformListener(self.tf2_buffer)

		self.ring_graber_pub = rospy.Publisher('main_grab_3d_ring', Pose, queue_size=10)
		self.paused = False
	
	def init(self):
		while(not self.ac.wait_for_server(rospy.Duration.from_sec(2.0))):
			rospy.loginfo("Waiting for the move_base action server to come up")
			if rospy.is_shutdown():
				return

	def explore(self):
		goal_state = GoalStatus.LOST

		while self.curr_explore_point < len(self.explore_points) and not rospy.is_shutdown():
			if len(self.ring_poses) > 0:
				# Wait till the ring graber is done
				while self.paused:
					rospy.sleep(0.01)

				self.curr_explore_point = self.curr_explore_point - 1
				if self.ring_counter > 2:
					rospy.loginfo("Found {} rings, ending exploration".format(self.ring_counter + 1))
					break

			explore_string = "Exploring point number {}".format(self.curr_explore_point)
			rospy.loginfo(explore_string)

			self.got_to(self.explore_points[self.curr_explore_point])
			self.rotate(15, 360)

			self.curr_explore_point = (self.curr_explore_point + 1) % len(self.explore_points)

	def call_ring_graber(self, ring_pose):
		rospy.loginfo("Passing ring pose to ring graber")
		self.ring_graber_pub.publish(ring_pose)
		self.ring_counter = self.ring_counter + 1
		self.paused = True

	def ring_graber_done(self, pose):
		rospy.loginfo("Ring graber is done!")
		self.paused = False
		del self.ring_poses[:]

	def got_to(self, goal):
		self.stop()

		self.ac.send_goal(goal)

		goal_state = GoalStatus.LOST
		while (not goal_state == GoalStatus.SUCCEEDED) and len(self.ring_poses) == 0:
			self.ac.wait_for_result(rospy.Duration(0.01))

			goal_state = self.ac.get_state()
			#Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST.

			if goal_state == GoalStatus.SUCCEEDED:
				rospy.loginfo("The point was reached!")

			if rospy.is_shutdown():
				return

	def rotate(self, speed, angle):
		vel_msg = Twist()

		angular_speed = speed*2*PI/360
		relative_angle = angle*2*PI/360

		vel_msg.linear.x=0
		vel_msg.linear.y=0
  		vel_msg.linear.z=0
  		vel_msg.angular.x = 0
		vel_msg.angular.y = 0
		vel_msg.angular.z = abs(angular_speed)

		t0 = rospy.Time.now().to_sec()
		current_angle = 0

		while(current_angle < relative_angle) and len(self.ring_poses) == 0:
		    self.vel_pub.publish(vel_msg)
		    t1 = rospy.Time.now().to_sec()
		    current_angle = angular_speed*(t1-t0)

		    if rospy.is_shutdown():
				return


		#Forcing our robot to stop
		vel_msg.angular.z = 0
		self.vel_pub.publish(vel_msg)

	def add_ring_pose(self, pose):
		found_string = "Found ring number {}".format(self.ring_counter)
		rospy.loginfo(found_string)

		self.ring_poses.append(pose)
		self.call_ring_graber(pose)
		self.paused = True

	def stop(self):
		self.ac.cancel_goal()


if __name__ == '__main__':

		rospy.init_node('main', anonymous=False)

		if debug:
			rospy.loginfo("main DEBUG mode")

		m = Main()

		rospy.Subscriber("grab_3d_ring", Pose, m.add_ring_pose)
		rospy.Subscriber("done", Pose, m.ring_graber_done)
		m.init()

		m.explore()
		m.stop()
		rospy.loginfo("All tasks finished, I'm going to bed")