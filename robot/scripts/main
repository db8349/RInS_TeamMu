#!/usr/bin/env python
import roslib
roslib.load_manifest('robot')
import rospy
import sensor_msgs.msg
import message_filters
import tf2_ros
from geometry_msgs.msg import Point, Twist


import actionlib
from actionlib_msgs.msg import GoalStatus
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from geometry_msgs.msg import Twist
PI = 3.1415926535897

from std_msgs.msg import String

from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

debug = True

def init_explore_points():
	explore_points = []
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -1.24
	goal.target_pose.pose.position.y = -1.68
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.033
	goal.target_pose.pose.position.y = -2.01
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 1.15
	goal.target_pose.pose.position.y = -0.666
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 1.27
	goal.target_pose.pose.position.y = 0.6
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.639
	goal.target_pose.pose.position.y = 1.56
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.393
	goal.target_pose.pose.position.y = 1.32
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -1.05
	goal.target_pose.pose.position.y = -0.46
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	return explore_points

def init_explore_points_debug():
	explore_points = []
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.39
	goal.target_pose.pose.position.y = 1.51
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.37
	goal.target_pose.pose.position.y = 3.83
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.61
	goal.target_pose.pose.position.y = 2.67
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 4.79
	goal.target_pose.pose.position.y = 1.98
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.65
	goal.target_pose.pose.position.y = 1.42
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	return explore_points


class Main():
	def __init__(self):
		global debug

		self.ac = actionlib.SimpleActionClient("move_base", MoveBaseAction)

		self.vel_pub = rospy.Publisher('/cmd_vel_mux/input/navi', Twist, queue_size=10)

		if debug:
			self.explore_points = init_explore_points_debug()
		else:
			self.explore_points = init_explore_points()
		self.curr_point = 0
		self.pause_exploring = False

		self.soundhandle = SoundClient()
		self.voice = 'voice_kal_diphone'
		self.volume = 1.0
	
	def init(self):
		while(not self.ac.wait_for_server(rospy.Duration.from_sec(2.0))):
			rospy.loginfo("Waiting for the move_base action server to come up")
			if rospy.is_shutdown():
				return

	def explore(self):
		goal_state = GoalStatus.LOST

		while self.curr_point < len(self.explore_points) and not self.pause_exploring:
			explore_string = "Exploring point number {}".format(self.curr_point)
			self.soundhandle.say(explore_string, self.voice, self.volume)
			rospy.loginfo(explore_string)

			self.ac.send_goal(self.explore_points[self.curr_point])
			goal_state = GoalStatus.LOST
			while (not goal_state == GoalStatus.SUCCEEDED) and not self.pause_exploring:
				self.ac.wait_for_result(rospy.Duration(0.01))
				goal_state = self.ac.get_state()
				#Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST.

				if goal_state == GoalStatus.SUCCEEDED:
					rospy.loginfo("The point was reached!")
					self.rotate(30, 360)
					self.curr_point = (self.curr_point + 1) % len(self.explore_points)

				if rospy.is_shutdown():
					return

	def rotate(self, speed, angle):
		vel_msg = Twist()

		angular_speed = speed*2*PI/360
		relative_angle = angle*2*PI/360

		vel_msg.linear.x=0
		vel_msg.linear.y=0
  		vel_msg.linear.z=0
  		vel_msg.angular.x = 0
		vel_msg.angular.y = 0
		vel_msg.angular.z = abs(angular_speed)

		t0 = rospy.Time.now().to_sec()
		current_angle = 0

		while(current_angle < relative_angle) and not self.pause_exploring:
		    self.vel_pub.publish(vel_msg)
		    t1 = rospy.Time.now().to_sec()
		    current_angle = angular_speed*(t1-t0)

		    if rospy.is_shutdown():
				return


		#Forcing our robot to stop
		vel_msg.angular.z = 0
		self.vel_pub.publish(vel_msg)

	def toggle_pause(self, data):
		self.soundhandle.say("pause", self.voice, self.volume)
		print(self.pause_exploring)
		self.pause_exploring = not self.pause_exploring
		
		if not self.pause_exploring:
			self.explore()
			return

				


if __name__ == '__main__':

		rospy.init_node('main', anonymous=False)

		m = Main()

		rospy.Subscriber("pause", String, m.toggle_pause)
		m.init()

		m.explore()
		rospy.loginfo("all done :)")
		rospy.spin()