#!/usr/bin/env python
import roslib
roslib.load_manifest('robot')
import rospy
import sensor_msgs.msg
import message_filters
import tf2_ros
from geometry_msgs.msg import Point, Twist


import actionlib
from actionlib_msgs.msg import GoalStatus
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from geometry_msgs.msg import Twist
PI = 3.1415926535897

from sound_play.msg import SoundRequest
from sound_play.libsoundplay import SoundClient

from geometry_msgs.msg import Pose

import tf2_ros
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point, Vector3

import math

debug = False

def init_explore_points():
	explore_points = []
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -1.24
	goal.target_pose.pose.position.y = -1.68
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.033
	goal.target_pose.pose.position.y = -2.01
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 1.15
	goal.target_pose.pose.position.y = -0.666
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 1.27
	goal.target_pose.pose.position.y = 0.6
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 0.639
	goal.target_pose.pose.position.y = 1.56
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -0.393
	goal.target_pose.pose.position.y = 1.32
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = -1.05
	goal.target_pose.pose.position.y = -0.46
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	return explore_points

def init_explore_points_debug():
	explore_points = []
	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.39
	goal.target_pose.pose.position.y = 1.51
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 2.37
	goal.target_pose.pose.position.y = 3.83
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.61
	goal.target_pose.pose.position.y = 2.67
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 4.79
	goal.target_pose.pose.position.y = 1.98
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	goal = MoveBaseGoal()
	goal.target_pose.header.frame_id = "map"
	goal.target_pose.header.stamp = rospy.Time.now()
	goal.target_pose.pose.position.x = 3.65
	goal.target_pose.pose.position.y = 1.42
	goal.target_pose.pose.orientation.w = 1.0
	explore_points.append(goal)

	return explore_points


class Main():
	def __init__(self):
		global debug

		self.ac = actionlib.SimpleActionClient("move_base", MoveBaseAction)

		self.vel_pub = rospy.Publisher('/cmd_vel_mux/input/navi', Twist, queue_size=10)

		if debug:
			self.explore_points = init_explore_points_debug()
		else:
			self.explore_points = init_explore_points()
		self.curr_point = 0
		self.circle_points = []
		self.circle_counter = 0

		self.soundhandle = SoundClient()
		self.voice = 'voice_kal_diphone'
		self.volume = 1.0

		self.tf2_buffer = tf2_ros.Buffer()
		self.tf2_listener = tf2_ros.TransformListener(self.tf2_buffer)
	
	def init(self):
		while(not self.ac.wait_for_server(rospy.Duration.from_sec(2.0))):
			rospy.loginfo("Waiting for the move_base action server to come up")
			if rospy.is_shutdown():
				return

	def explore(self):
		goal_state = GoalStatus.LOST

		while self.curr_point < len(self.explore_points) and not rospy.is_shutdown():
			if len(self.circle_points) > 0:
				self.visit_points()
				if self.circle_counter > 10000000000000:
					self.soundhandle.say("All tasks finished,     I'm going to bed", self.voice, self.volume)
					break

			explore_string = "Exploring point number {}".format(self.curr_point)
			rospy.loginfo(explore_string)

			self.got_to(self.explore_points[self.curr_point])
			self.rotate(15, 360)

			self.curr_point = self.curr_point + 1

	def get_curr_pose(self):
		trans = None
		try:
			trans = self.tf2_buffer.lookup_transform('map', 'base_link', rospy.Time(0))
		except Exception as e:
			print e
			return None

		curr_pose = Pose()
		curr_pose.position.x = trans.transform.translation.x
		curr_pose.position.y = trans.transform.translation.y
		curr_pose.position.z = trans.transform.translation.z

		return curr_pose

	def visit_points(self):
		i = 0
		while i < len(self.circle_points):
			rospy.loginfo("Circle point: ({}, {})".format(self.circle_points[i].position.x, self.circle_points[i].position.y))
			self.approach_circle(self.circle_points[i])
			self.soundhandle.say("Hello circle!", self.voice, self.volume)

			self.circle_counter = self.circle_counter + 1
			i = i + 1

		del self.circle_points[:]

	def get_distance(self, curr_pose, point):
		v = Vector3(point.position.x - curr_pose.position.x, point.position.y - curr_pose.position.y, 
			point.position.z - curr_pose.position.z)
		return math.sqrt(math.pow(v.x, 2) + math.pow(v.y, 2))

	def got_to(self, goal):
		self.ac.send_goal(goal)

		goal_state = GoalStatus.LOST
		while (not goal_state == GoalStatus.SUCCEEDED) and len(self.circle_points) == 0:
			self.ac.wait_for_result(rospy.Duration(0.01))

			goal_state = self.ac.get_state()
			#Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST.

			if goal_state == GoalStatus.SUCCEEDED:
				rospy.loginfo("The point was reached!")

			if rospy.is_shutdown():
				return

	def approach_circle(self, goal):
		base_goal = MoveBaseGoal()
		base_goal.target_pose.header.frame_id = "map"
		base_goal.target_pose.header.stamp = rospy.Time.now()
		base_goal.target_pose.pose.position.x = goal.position.x
		base_goal.target_pose.pose.position.y = goal.position.y
		#base_goal.target_pose.pose.orientation.w = goal.orientation.w
		base_goal.target_pose.pose.orientation.w = 1.0
		self.ac.send_goal(base_goal)

		goal_state = GoalStatus.LOST
		while (not goal_state == GoalStatus.SUCCEEDED):
			self.ac.wait_for_result(rospy.Duration(0.01))

			curr_pose = self.get_curr_pose()
			if curr_pose is None:
				rospy.sleep(0.1)
				continue

			rospy.loginfo(self.get_distance(curr_pose, goal))
			if self.get_distance(curr_pose, goal) <= 0.20:
				break

			goal_state = self.ac.get_state()
			#Possible States Are: PENDING, ACTIVE, RECALLED, REJECTED, PREEMPTED, ABORTED, SUCCEEDED, LOST.

			if goal_state == GoalStatus.SUCCEEDED:
				rospy.loginfo("The point was reached!")

			if rospy.is_shutdown():
				return

	def rotate(self, speed, angle):
		vel_msg = Twist()

		angular_speed = speed*2*PI/360
		relative_angle = angle*2*PI/360

		vel_msg.linear.x=0
		vel_msg.linear.y=0
  		vel_msg.linear.z=0
  		vel_msg.angular.x = 0
		vel_msg.angular.y = 0
		vel_msg.angular.z = abs(angular_speed)

		t0 = rospy.Time.now().to_sec()
		current_angle = 0

		while(current_angle < relative_angle) and len(self.circle_points) == 0:
		    self.vel_pub.publish(vel_msg)
		    t1 = rospy.Time.now().to_sec()
		    current_angle = angular_speed*(t1-t0)

		    if rospy.is_shutdown():
				return


		#Forcing our robot to stop
		vel_msg.angular.z = 0
		self.vel_pub.publish(vel_msg)

	def add_circle_point(self, data):
		found_string = "Found circle number {}".format(self.circle_counter)
		self.soundhandle.say(found_string, self.voice, self.volume)
		rospy.loginfo(found_string)

		self.circle_points.append(data)

	def stop(self):
		self.ac.cancel_goal()

				


if __name__ == '__main__':

		rospy.init_node('main', anonymous=False)

		m = Main()

		rospy.Subscriber("points", Pose, m.add_circle_point)
		m.init()

		m.explore()
		m.stop()
		rospy.loginfo("All tasks finished, I'm going to bed")